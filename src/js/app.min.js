/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/
(() => { // webpackBootstrap
    /******/
    "use strict";
    /******/
    var __webpack_modules__ = ({

        /***/
        "./src/js/app.js":
        /*!***********************!*\
          !*** ./src/js/app.js ***!
          \***********************/
        /***/
            ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

            eval("__webpack_require__.r(__webpack_exports__);\nwindow.onload = function() {\r\n\r\n    const step1Btn = document.querySelector('.step-1.button');\r\n    const step1Page = document.querySelector('.step-1.page');\r\n    const step2Page = document.querySelector('.step-2.page');\r\n    const redactPage = document.querySelector('.redact.page');\r\n    step1Btn.addEventListener('click', changePage)\r\n\r\n    function changePage() {\r\n        step1Page.style.display = 'none';\r\n        step2Page.style.display = 'block';\r\n    }\r\n    // const canvas2 = document.querySelector('#c2');\r\n    // const context2 = canvas2.getContext(\"2d\");\r\n    let FReader = new FileReader();\r\n    const img = document.querySelector(\".prew\"),\r\n        imgWrapper = document.querySelector('.img-wrapper'),\r\n        //\r\n        square = document.querySelector(\"#square\"),\r\n        topInput = document.querySelector('.top'),\r\n        leftInput = document.querySelector('.left'),\r\n        rotateInput = document.querySelector('.rotate-input'),\r\n\r\n        //\r\n        white = document.querySelector('.white'),\r\n        lightGray = document.querySelector('.light-gray'),\r\n        gray = document.querySelector('.gray'),\r\n        darkGray = document.querySelector('.dark-gray'),\r\n        black = document.querySelector('.black'),\r\n\r\n        forCropCanvas = document.querySelector('.for-crop'),\r\n        forCropContext = forCropCanvas.getContext(\"2d\"),\r\n\r\n        forFilterCanvas = document.querySelector('.for-filter'),\r\n        forFilterContext = forFilterCanvas.getContext(\"2d\"),\r\n\r\n\r\n\r\n        version2Canvas = document.querySelector('.version2'),\r\n        version2Context = version2Canvas.getContext(\"2d\")\r\n\r\n\r\n\r\n    var defaultImgWidth;\r\n    var defaultImgHeight;\r\n    var scale = 1;\r\n    var imgCurrentHeight = 0;\r\n    var imgCurrentWidth = 0;\r\n    // выполнение функции при выборки файла\r\n    document.querySelector(\".file\").addEventListener(\"change\", loadImageFile);\r\n\r\n    // функция выборки файла\r\n    function loadImageFile() {\r\n        step2Page.style.display = 'none';\r\n        redactPage.style.display = 'block';\r\n        var file = document.querySelector(\".file\").files[0];\r\n        FReader.readAsDataURL(file);\r\n    }\r\n\r\n    // событие, когда файл загрузится\r\n    FReader.onload = function(e) {\r\n        img.src = e.target.result;\r\n        img.onload = function() {\r\n            defaultImgWidth = img.width;\r\n            defaultImgHeight = img.height;\r\n            if (defaultImgWidth > defaultImgHeight) {\r\n                img.style.height = square.offsetWidth + 'px';\r\n                img.style.minHeight = square.offsetWidth + 'px';\r\n            } else {\r\n                img.style.width = square.offsetWidth + 'px';\r\n                img.style.minWidth = square.offsetWidth + 'px';\r\n            }\r\n            imgCurrentHeight = img.offsetHeight;\r\n            imgCurrentWidth = img.offsetWidth;\r\n            checkPosition();\r\n            currentSize(imgWrapper);\r\n        };\r\n    };\r\n\r\n    var plusSize = document.querySelector('.plus-size');\r\n    var minusSize = document.querySelector('.minus-size');\r\n\r\n    plusSize.addEventListener('click', function(evt) {\r\n        scale += 0.1;\r\n        img.style.transform = `rotate(${rotateInput.value}deg)scale(${scale})`;\r\n        imgCurrentWidth = img.width * scale;\r\n        imgCurrentHeight = img.height * scale;\r\n        currentSize(imgWrapper);\r\n        checkPosition();\r\n    });\r\n    minusSize.addEventListener('click', function(evt) {\r\n\r\n        scale -= 0.1;\r\n        img.style.transform = `rotate(${rotateInput.value}deg)scale(${scale})`;\r\n        imgCurrentWidth = img.width * scale;\r\n        imgCurrentHeight = img.height * scale;\r\n        currentSize(imgWrapper);\r\n        checkPosition();\r\n    });\r\n\r\n    img.addEventListener('mouseover', function() {\r\n        img.addEventListener('wheel', function(evt) {\r\n            evt.preventDefault();\r\n            if (evt.deltaY > 0) {\r\n                if (scale >= 1) {\r\n                    scale = scale - evt.deltaY * 0.0003;\r\n\r\n                }\r\n            }\r\n            if (evt.deltaY < 0) {\r\n                scale = scale - evt.deltaY * 0.0003;\r\n\r\n            }\r\n            img.style.transform = `rotate(${rotateInput.value}deg)scale(${scale})`;\r\n            imgCurrentWidth = img.width * scale;\r\n            imgCurrentHeight = img.height * scale;\r\n            currentSize(imgWrapper);\r\n            checkPosition();\r\n        });\r\n    });\r\n\r\n    var rotateLeft = document.querySelector('.rotate-left');\r\n    var rotateRight = document.querySelector('.rotate-right');\r\n\r\n    rotateLeft.addEventListener('click', function(evt) {\r\n        rotateInput.value = Number(rotateInput.value) - 90;\r\n        if (rotateInput.value == Number(360) || rotateInput.value == Number(-360)) {\r\n            rotateInput.value = \"0\";\r\n        }\r\n        img.style.transform = `rotate(${rotateInput.value}deg)scale(${scale})`;\r\n        currentSize(imgWrapper);\r\n        checkPosition();\r\n    });\r\n    rotateRight.addEventListener('click', function(evt) {\r\n        rotateInput.value = Number(rotateInput.value) + 90;\r\n        if (rotateInput.value == Number(360) || rotateInput.value == Number(-360)) {\r\n\r\n            rotateInput.value = \"0\";\r\n        }\r\n        img.style.transform = `rotate(${rotateInput.value}deg)scale(${scale})`;\r\n        currentSize(imgWrapper);\r\n        checkPosition();\r\n    });\r\n\r\n    imgWrapper.addEventListener(\"mousedown\", function(event) {\r\n\r\n        let coordsItemX = event.clientX - imgWrapper.getBoundingClientRect().left;\r\n        let coordsItemY = event.clientY - imgWrapper.getBoundingClientRect().top;\r\n\r\n        let imgWrapperSizes = {\r\n            width: imgWrapper.offsetWidth,\r\n            height: imgWrapper.offsetHeight,\r\n            left: imgWrapper.getBoundingClientRect().left + scrollX,\r\n            top: imgWrapper.getBoundingClientRect().top + scrollY,\r\n            right: imgWrapper.getBoundingClientRect().left + scrollX + imgWrapper.offsetWidth,\r\n            bottom: imgWrapper.getBoundingClientRect().top + scrollY + imgWrapper.offsetHeight\r\n        }\r\n        let squareSizes = {\r\n            width: square.offsetWidth,\r\n            height: square.offsetHeight,\r\n            left: square.getBoundingClientRect().left + scrollX,\r\n            top: square.getBoundingClientRect().top + scrollY,\r\n            right: square.getBoundingClientRect().left + scrollX + square.offsetWidth,\r\n            bottom: square.getBoundingClientRect().top + scrollY + square.offsetHeight\r\n        }\r\n\r\n        imgWrapper.style.position = 'absolute';\r\n\r\n        moveItem(event.pageX, event.pageY);\r\n\r\n        function moveItem(pageX, pageY) {\r\n\r\n            let currentX = pageX - coordsItemX - squareSizes.left;\r\n            let currentY = pageY - coordsItemY - squareSizes.top;\r\n\r\n            if (\r\n                currentX + imgWrapperSizes.width >= squareSizes.width &&\r\n                currentX <= 0\r\n            ) {\r\n                imgWrapper.style.left = `${currentX}px`;\r\n            } else {\r\n                if (currentX + imgWrapperSizes.width < squareSizes.width) {\r\n                    imgWrapper.style.left = `${squareSizes.width-imgWrapperSizes.width}px`;\r\n                }\r\n                if (currentX > 0) {\r\n                    imgWrapper.style.left = `${0}px`;\r\n                }\r\n            }\r\n            if (\r\n                currentY + imgWrapperSizes.height >= squareSizes.height &&\r\n                currentY <= 0\r\n            ) {\r\n                imgWrapper.style.top = `${currentY}px`;\r\n            } else {\r\n                if (currentY + imgWrapperSizes.height < squareSizes.height) {\r\n                    imgWrapper.style.top = `${squareSizes.height-imgWrapperSizes.height}px`;\r\n                }\r\n                if (currentY > 0) {\r\n                    imgWrapper.style.top = `${0}px`;\r\n                }\r\n            }\r\n            checkPosition();\r\n        }\r\n\r\n        function onDragItem(event) {\r\n            moveItem(event.pageX, event.pageY);\r\n        }\r\n        document.addEventListener('mousemove', onDragItem);\r\n\r\n        document.addEventListener(\"mouseup\", function(event) {\r\n            document.removeEventListener('mousemove', onDragItem);\r\n        }, { \"once\": true });\r\n    });\r\n    imgWrapper.addEventListener(\"dragstart\", function(event) {\r\n        event.preventDefault();\r\n    });\r\n\r\n    square.addEventListener('touchstart', handleTouchStart, false);\r\n\r\n    var xDown = null;\r\n    var yDown = null;\r\n\r\n    function getTouches(evt) {\r\n        return evt.touches\r\n    }\r\n\r\n    function handleTouchStart(evt) {\r\n        const firstTouch = getTouches(evt)[0];\r\n\r\n        xDown = firstTouch.clientX - imgWrapper.getBoundingClientRect().left + scrollX;\r\n        yDown = firstTouch.clientY - imgWrapper.getBoundingClientRect().top + scrollY;\r\n    };\r\n\r\n    square.addEventListener('touchmove', (evt) => {\r\n        evt.preventDefault();\r\n        let imgWrapperSizes;\r\n        let squareSizes;\r\n        imgWrapperSizes = {\r\n            width: imgWrapper.offsetWidth,\r\n            height: imgWrapper.offsetHeight,\r\n            left: imgWrapper.getBoundingClientRect().left + scrollX,\r\n            top: imgWrapper.getBoundingClientRect().top + scrollY,\r\n            right: imgWrapper.getBoundingClientRect().left + scrollX + imgWrapper.offsetWidth,\r\n            bottom: imgWrapper.getBoundingClientRect().top + scrollY + imgWrapper.offsetHeight\r\n        }\r\n        squareSizes = {\r\n            width: square.offsetWidth,\r\n            height: square.offsetHeight,\r\n            left: square.getBoundingClientRect().left + scrollX,\r\n            top: square.getBoundingClientRect().top + scrollY,\r\n            right: square.getBoundingClientRect().left + scrollX + square.offsetWidth,\r\n            bottom: square.getBoundingClientRect().top + scrollY + square.offsetHeight\r\n        }\r\n        imgWrapper.style.position = 'absolute';\r\n        let pageX;\r\n        let pageY;\r\n        var i;\r\n        for (i = 0; i < evt.changedTouches.length; i++) {\r\n            pageX = evt.changedTouches[i].clientX;\r\n            pageY = evt.changedTouches[i].clientY;\r\n            let currentX = pageX - xDown - squareSizes.left;\r\n            let currentY = pageY - yDown - squareSizes.top;\r\n\r\n            if (\r\n                currentX + imgWrapperSizes.width >= squareSizes.width &&\r\n                currentX <= 0\r\n            ) {\r\n                imgWrapper.style.left = `${currentX}px`;\r\n            } else {\r\n                if (currentX + imgWrapperSizes.width < squareSizes.width) {\r\n                    imgWrapper.style.left = `${squareSizes.width-imgWrapperSizes.width}px`;\r\n                }\r\n                if (currentX > 0) {\r\n                    imgWrapper.style.left = `${0}px`;\r\n                }\r\n            }\r\n            if (\r\n                currentY + imgWrapperSizes.top >= squareSizes.top &&\r\n                currentY <= 0\r\n            ) {\r\n                imgWrapper.style.top = `${currentY}px`;\r\n            } else {\r\n                if (currentY + imgWrapperSizes.top < squareSizes.top) {\r\n                    imgWrapper.style.top = `${squareSizes.height-imgWrapperSizes.height}px`;\r\n                }\r\n                if (currentY > 0) {\r\n                    imgWrapper.style.top = `${0}px`;\r\n                }\r\n            }\r\n            checkPosition();\r\n            currentSize(imgWrapper);\r\n        }\r\n    });\r\n\r\n    function currentSize(elem) {\r\n        elem.style.width = img.getBoundingClientRect().right - img.getBoundingClientRect().left + `px`;\r\n        elem.style.height = img.getBoundingClientRect().bottom - img.getBoundingClientRect().top + `px`;\r\n    }\r\n\r\n    function checkPosition() {\r\n        var imgPosition = img.getBoundingClientRect();\r\n        var squarePosition = square.getBoundingClientRect();\r\n        topInput.value = Math.round(imgPosition.top - squarePosition.top);\r\n        leftInput.value = Math.round(imgPosition.left - squarePosition.left);\r\n    }\r\n    var drawCanvas = document.querySelector('.draw');\r\n    drawCanvas.addEventListener('click', canvasDraw);\r\n\r\n    function canvasDraw() {\r\n        forCropCanvas.height = square.offsetHeight;\r\n        forCropCanvas.width = square.offsetWidth;\r\n        forCropContext.save();\r\n        forCropContext.translate(forCropCanvas.offsetWidth / 2, forCropCanvas.offsetHeight / 2);\r\n        forCropContext.fillRect(0, 0, 100, 100);\r\n        forCropContext.rotate(rotateInput.value * (Math.PI / 180));\r\n\r\n        forCropContext.drawImage(img, leftInput.value - forCropCanvas.offsetWidth / 2, topInput.value - forCropCanvas.offsetHeight / 2, imgCurrentWidth, imgCurrentHeight);\r\n\r\n        version2Canvas.height = square.offsetHeight;\r\n        version2Canvas.width = square.offsetWidth;\r\n        pixelisation(128, forCropContext, version2Context, 0);\r\n    }\r\n\r\n    function Filter() {\r\n        var imgData = forCropContext.getImageData(0, 0, square.offsetWidth, square.offsetHeight);\r\n        forFilterCanvas.width = square.offsetWidth;\r\n        forFilterCanvas.height = square.offsetHeight;\r\n        // циклически преобразуем массив, изменяя значения красного, зеленого и синего каналов\r\n        imgDataFiltered = grayFilter(imgData);\r\n\r\n        function grayFilter(imgData) {\r\n            // получаем одномерный массив, описывающий все пиксели изображения\r\n            var pixels = imgData.data;\r\n            // циклически преобразуем массив, изменяя значения красного, зеленого и синего каналов\r\n            for (var i = 0; i < pixels.length; i += 4) {\r\n                var r = pixels[i];\r\n                var g = pixels[i + 1];\r\n                var b = pixels[i + 2];\r\n                pixels[i] = (r + g + b) / 3; // red\r\n                pixels[i + 1] = (r + g + b) / 3; // green\r\n                pixels[i + 2] = (r + g + b) / 3; // blue\r\n            }\r\n            return imgData;\r\n        };\r\n        forFilterContext.putImageData(imgDataFiltered, 0, 0);\r\n    };\r\n\r\n    function pixelisation(countCells, contextStart, contextResult, version) {\r\n        let cellSize = square.offsetWidth / countCells;\r\n\r\n        if (version == 0 || version == 1 || version == 2) {\r\n            for (let i = 0; i * cellSize < square.offsetHeight; i++) {\r\n                for (let j = 0; j * cellSize < square.offsetWidth; j++) {\r\n                    if ((0 <= getAverange(contextStart, version, cellSize * i, cellSize * j, cellSize, cellSize)) && (getAverange(contextStart, version, cellSize * i, cellSize * j, cellSize, cellSize) < 51)) {\r\n                        contextResult.drawImage(black, cellSize * i, cellSize * j, cellSize, cellSize)\r\n                    }\r\n                    if ((51 <= getAverange(contextStart, version, cellSize * i, cellSize * j, cellSize, cellSize)) && (getAverange(contextStart, version, cellSize * i, cellSize * j, cellSize, cellSize) < 102)) {\r\n                        contextResult.drawImage(darkGray, cellSize * i, cellSize * j, cellSize, cellSize)\r\n                    }\r\n                    if ((102 <= getAverange(contextStart, version, cellSize * i, cellSize * j, cellSize, cellSize)) && (getAverange(contextStart, version, cellSize * i, cellSize * j, cellSize, cellSize) < 153)) {\r\n                        contextResult.drawImage(gray, cellSize * i, cellSize * j, cellSize, cellSize)\r\n                    }\r\n                    if ((153 <= getAverange(contextStart, version, cellSize * i, cellSize * j, cellSize, cellSize)) && (getAverange(contextStart, version, cellSize * i, cellSize * j, cellSize, cellSize) < 204)) {\r\n                        contextResult.drawImage(lightGray, cellSize * i, cellSize * j, cellSize, cellSize)\r\n                    }\r\n                    if ((204 <= getAverange(contextStart, version, cellSize * i, cellSize * j, cellSize, cellSize)) && (getAverange(contextStart, version, cellSize * i, cellSize * j, cellSize, cellSize) < 255)) {\r\n                        contextResult.drawImage(white, cellSize * i, cellSize * j, cellSize, cellSize)\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        function getAverange(contextStart, version, x, y, width, height) {\r\n            var grayData = contextStart.getImageData(x, y, width, height)\r\n            var grayPixels = grayData.data;\r\n            let Average = 0;\r\n            let countElments = 0;\r\n            for (var i = 0; i < grayPixels.length; i += 4) {\r\n                Average = Average + grayPixels[i + version];\r\n                countElments++;\r\n            }\r\n            let result = Math.round(Average / countElments);\r\n            return result;\r\n        };\r\n    };\r\n}\n\n//# sourceURL=webpack://gulp-2022/./src/js/app.js?");

            /***/
        })

        /******/
    });
    /************************************************************************/
    /******/ // The require scope
    /******/
    var __webpack_require__ = {};
    /******/
    /************************************************************************/
    /******/
    /* webpack/runtime/make namespace object */
    /******/
    (() => {
        /******/ // define __esModule on exports
        /******/
        __webpack_require__.r = (exports) => {
            /******/
            if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                /******/
                Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
                /******/
            }
            /******/
            Object.defineProperty(exports, '__esModule', { value: true });
            /******/
        };
        /******/
    })();
    /******/
    /************************************************************************/
    /******/
    /******/ // startup
    /******/ // Load entry module and return exports
    /******/ // This entry module can't be inlined because the eval devtool is used.
    /******/
    var __webpack_exports__ = {};
    /******/
    __webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
    /******/
    /******/
})();